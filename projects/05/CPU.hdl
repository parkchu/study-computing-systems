// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=notins15);
    Or16-1(a=instruction, b=instruction[15], out=orins1);
    Or16-1(a=loopA, b=notins15, out=orloopA);
    And16(a=orins1, b=orloopA, out=andA);
    And16-1(a=andA, b=notins15, out=resultA);

    Not(in=instruction[12], out=notins12);
    Or16-1(a=loopA, b=instruction[12], out=orA);
    Or16-1(a=inM, b=notins12, out=orM);
    And16(a=orA, b=orM, out=orAM);
    ALU(x=loopD, y=orAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=zrALU, ng=ngALU);
    And16-1(a=outALU, b=instruction[15], out=resultALU);
    And16-1(a=resultALU, b=instruction[3], out=outM);
    And(a=instruction[3], b=instruction[15], out=and315);
    And(a=and315, b=instruction[15], out=writeM);
    Or16(a=resultA, b=resultALU, out=inA);
    Or(a=notins15, b=instruction[5], out=loadA);
    And(a=instruction[4], b=instruction[15], out=loadD);
    ARegister(in=inA, load=loadA, out=loopA, out[0..14]=addressM);
    DRegister(in=resultALU, load=loadD , out=loopD);

    Nor(a=zrALU, b=ngALU, out=orzrng);
    And(a=instruction[0], b=orzrng, out=outj3);
    And(a=instruction[1], b=zrALU, out=outj2);
    And(a=instruction[2], b=ngALU, out=outj1);
    Or(a=outj3, b=outj2, out=orj3j2);
    Or(a=orj3j2, b=outj1, out=outloadPC);
    And(a=outloadPC, b=instruction[15], out=loadPC);
    PC(in=loopA, load=loadPC, inc=true, reset=reset, out[0..14]=pc); 
}