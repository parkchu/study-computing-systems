// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int color;

    /** Initializes the Screen. */
    function void init() {
        let color = 1;
        do Screen.clearScreen();
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int time;
        let time = 16384;
        while (time < 24576) {
            do Memory.poke(time, 0);
            let time = time + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) {
            let color = 1;
        } else {
            let color = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, memoryValue, point;
        let address = 16384 + (y * 32) + (x / 16);
        let memoryValue = Memory.peek(address);
        let point = x - ((x / 16) * 16);
        let point = Math.twoToTheAt(point);
        if (color = 0) {
            let memoryValue = memoryValue & ~point;
        } else {
            let memoryValue = memoryValue | point;
        }
        do Memory.poke(address, memoryValue);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, absDx, absDy, adyMinusbdx;
        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let absDx = Math.abs(dx);
        let absDy = Math.abs(dy);
        let adyMinusbdx = 0;
        if (dx = 0) {
            while (b < (absDy + 1)) {
                if (dy < 0) {
                    do Screen.drawPixel(x1, y1 - b);
                } else {
                    do Screen.drawPixel(x1, y1 + b);
                }
                let b = b + 1;
            }
            return;
        }
        if (dy = 0) {
            while (a < (absDx + 1)) {
                if (dx < 0) {
                    do Screen.drawPixel(x1 - a, y1);
                } else {
                    do Screen.drawPixel(x1 + a, y1);
                }
                let a = a + 1;
            }
            return;
        }
        while ((a < (absDx + 1)) & (b < (absDy + 1))) {
            if (dx < 0) {
                if (dy < 0) {
                    do Screen.drawPixel(x1 - a, y1 - b);
                } else {
                    do Screen.drawPixel(x1 - a, y1 + b);
                }
            } else {
                if (dy < 0) {
                    do Screen.drawPixel(x1 + a, y1 - b);
                } else {
                    do Screen.drawPixel(x1 + a, y1 + b);
                }
            }
            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + absDy;
            } else {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - absDx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        if (y1 < y2) {
            while (y1 < (y2 + 1)) {
                do Screen.drawLine(x1, y1, x2, y1);
                let y1 = y1 + 1;
            }
        } else {
            while (y2 < (y1 + 1)) {
                do Screen.drawLine(x1, y2, x2, y2);
                let y2 = y2 + 1;
            }
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, sqrt;
        let dy = -r;
        while (dy < (r + 1)) {
            let sqrt = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - sqrt, y + dy, x + sqrt, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
