// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        let chars = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        let length = 0;
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let chars[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        let chars[length] = null;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int time, result;
        let time = 0;
        let result = 0;
        while (time < length) {
            let result = result * 10 + chars[time];
            let time = time + 1;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var String string;
        var int time;
        let length = 0;
        let string = String.int2String(val);
        let time = 0;
        while (time < string.length()) {
            do appendChar(string.charAt(time));
            let time = time + 1;
        }
        return;
    }

    function String int2String(int val) {
        var int lastDigit;
        var char c;
        var String string;
        let lastDigit = val - ((val / 10) * 10);
        let c = (lastDigit + 48);
        if (val < 10) {
            let string = String.new(5);
            do string.appendChar(c);
            return string;
        } else {
            let string = String.int2String(val / 10);
            return string.appendChar(c);
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
